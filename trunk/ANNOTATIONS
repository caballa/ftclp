-----------------------
Program annotations
-----------------------

The Prolog programs can be annotated with the following directives:

:- tabled(foo(_,num)).

Tells our interpreter that we should do tabling of foo/2. Moreover, it
tells us that the 2nd argument is a number and hence, we will model it
using the theory of (integer or real) linear arithmetic. The '_'
symbols tells us that the argument should be modeled with Herbrand
logic and use Prolog unification on it.

:- discriminants(bar(d,nd)).

This is optional but it may help significantly tabling.  This idea
comes from the paper Christiansen [1] that present a technique to
identify non-discriminating arguments, i.e., arguments that do not
have any impact on the control flow of the logic program. The symbol
'd' says to our interpreter that the argument is discriminant and 'nd'
non-discriminating.

[1] presents an automatic program transformation to eliminate from the
original program all the non-discriminating arguments. In the future,
we would like to use this transformation. Meanwhile, user must say so.

:- no_cache(foo(_,_)).

It says to our interpreter not to generate interpolants for foo/2 and
do not perform entailment tests to run executions of foo/2. It's a bit
redundant because if we do not annotate with :- tabled(foo(_,_)). we
can get the same behavior.


Bibliography

[1] Non-discriminating Arguments and Their Uses. H. Christiansen and
    J. P. Gallagher. ICLP'09.
